{"ast":null,"code":"var _jsxFileName = \"/Users/annalisekimura/Desktop/Calendar/calendar/src/Pages/Week.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport '../App.css';\nimport Fullcalendar from \"@fullcalendar/react\";\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\nimport interactionPlugin from \"@fullcalendar/interaction\";\nimport { useContext } from 'react';\nimport { WeekContext } from './WeekContext';\nimport { useRef, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction WeekPage() {\n  _s();\n  const {\n    events2,\n    setEvents2\n  } = useContext(WeekContext);\n  useEffect(() => {\n    const storedEvents = JSON.parse(localStorage.getItem('calendarEvents'));\n    if (storedEvents) {\n      setEvents2(storedEvents);\n    }\n  }, [setEvents2]);\n  const handleEventClick = info => {\n    const event = info.event;\n    const choice = prompt(`Do you want to edit or delete the event \"${event.title}\"?\\nType 'Edit' or 'Delete'`);\n    if (choice === 'Edit') {\n      const newTitle = prompt('Enter the new title for the event:', event.title);\n      if (newTitle) {\n        event.setProp('title', newTitle);\n        const updatedEvents = events2.map(evt => evt.id === event.id ? {\n          ...evt,\n          title: newTitle\n        } : evt);\n        setEvents2(updatedEvents);\n        localStorage.setItem('calendarEvents', JSON.stringify(updatedEvents));\n        alert('Event updated. Now, update your database...');\n      } else {\n        alert('Event title cannot be empty.');\n      }\n    } else if (choice === 'Delete') {\n      const updatedEvents = events2.filter(evt => evt.id !== parseInt(event.id, 10));\n      event.remove();\n      setEvents2(updatedEvents);\n      localStorage.setItem('calendarEvents', JSON.stringify(updatedEvents));\n      alert('Event deleted. Now, update your database...');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"weekly-calendar\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Week\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Fullcalendar, {\n        plugins: [dayGridPlugin, timeGridPlugin, interactionPlugin],\n        initialView: \"timeGridWeek\",\n        headerToolbar: {\n          center: 'addEventButton'\n        },\n        customButtons: {\n          addEventButton: {\n            text: 'add event...',\n            click: function () {\n              var dateStr = prompt('Enter a date in YYYY-MM-DD format');\n              var date = new Date(dateStr + 'T00:00:00'); // will be in local time\n\n              if (!isNaN(date.valueOf())) {\n                // valid?\n                var title = prompt('Enter the event title:');\n                var id = Date.now();\n                const calendarApi = calendarRef.current.getApi();\n                const newEvent = {\n                  id: id,\n                  title: title,\n                  start: date,\n                  allDay: true\n                };\n                calendarApi.addEvent(newEvent);\n                handleEventAdd(newEvent);\n                alert('Great. Now, update your database...');\n              } else {\n                alert('Invalid date.');\n              }\n            }\n          }\n        },\n        events: events2,\n        eventClick: handleEventClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"event-list\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Important Dates\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        id: \"lists\",\n        children: events2.map((event, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [event.title, \" - \", new Date(event.start).toLocaleDateString()]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this);\n}\n_s(WeekPage, \"SwkKcwElWnJvQ+BMLzuCk0GgHK4=\");\n_c = WeekPage;\nexport default WeekPage;\nvar _c;\n$RefreshReg$(_c, \"WeekPage\");","map":{"version":3,"names":["React","Fullcalendar","dayGridPlugin","timeGridPlugin","interactionPlugin","useContext","WeekContext","useRef","useEffect","jsxDEV","_jsxDEV","WeekPage","_s","events2","setEvents2","storedEvents","JSON","parse","localStorage","getItem","handleEventClick","info","event","choice","prompt","title","newTitle","setProp","updatedEvents","map","evt","id","setItem","stringify","alert","filter","parseInt","remove","className","children","fileName","_jsxFileName","lineNumber","columnNumber","plugins","initialView","headerToolbar","center","customButtons","addEventButton","text","click","dateStr","date","Date","isNaN","valueOf","now","calendarApi","calendarRef","current","getApi","newEvent","start","allDay","addEvent","handleEventAdd","events","eventClick","index","toLocaleDateString","_c","$RefreshReg$"],"sources":["/Users/annalisekimura/Desktop/Calendar/calendar/src/Pages/Week.js"],"sourcesContent":["import React from 'react';\nimport '../App.css'; \nimport Fullcalendar from \"@fullcalendar/react\";\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\nimport interactionPlugin from \"@fullcalendar/interaction\";\nimport { useContext } from 'react';\nimport { WeekContext } from './WeekContext';\nimport { useRef, useEffect } from 'react';\n\n\nfunction WeekPage() {\n\n    const {events2, setEvents2} = useContext(WeekContext);\n    useEffect(() => {\n        const storedEvents = JSON.parse(localStorage.getItem('calendarEvents'));\n        if (storedEvents) {\n            setEvents2(storedEvents)\n        }\n    }, [setEvents2]);\n\n\n    const handleEventClick = (info) => {\n        const event = info.event;\n        const choice = prompt(`Do you want to edit or delete the event \"${event.title}\"?\\nType 'Edit' or 'Delete'`);\n    \n        if (choice === 'Edit') {\n          const newTitle = prompt('Enter the new title for the event:', event.title);\n          if (newTitle) {\n            event.setProp('title', newTitle);\n            const updatedEvents = events2.map(evt => evt.id === event.id ? {...evt, title: newTitle} : evt);\n            setEvents2(updatedEvents);\n            localStorage.setItem('calendarEvents', JSON.stringify(updatedEvents));\n            alert('Event updated. Now, update your database...');\n          } else {\n            alert('Event title cannot be empty.');\n          }\n        } else if (choice === 'Delete') {\n          \n          const updatedEvents = events2.filter(evt => evt.id !== parseInt(event.id, 10));\n          event.remove();\n          \n          setEvents2(updatedEvents);\n          \n          localStorage.setItem('calendarEvents', JSON.stringify(updatedEvents));\n          alert('Event deleted. Now, update your database...');\n        }\n      };\n\n    return (\n        <div className=\"container\">\n            <div className=\"weekly-calendar\">\n                <h1>Week</h1>\n                <Fullcalendar\n                    plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\n                    initialView=\"timeGridWeek\"\n                    headerToolbar={{\n                        center: 'addEventButton'\n                      }}\n                      customButtons={{\n                        addEventButton: {\n                          text: 'add event...',\n                          click: function() {\n                            var dateStr = prompt('Enter a date in YYYY-MM-DD format');\n                            var date = new Date(dateStr + 'T00:00:00'); // will be in local time\n                \n                            if (!isNaN(date.valueOf())) { // valid?\n                                var title = prompt('Enter the event title:');\n                                var id = Date.now();\n    \n                                    const calendarApi = calendarRef.current.getApi()\n                                    const newEvent = {\n                                        id: id,\n                                        title: title,\n                                        start: date,\n                                        allDay: true\n                                    }\n                              calendarApi.addEvent(newEvent);\n                              handleEventAdd(newEvent);\n                              alert('Great. Now, update your database...');\n                            } else {\n                              alert('Invalid date.');\n                            }\n                          }\n                        }\n                      }}\n                      events={events2}\n                      eventClick={handleEventClick}\n\n                />\n            </div>\n            <div className=\"event-list\">\n                <h2>Important Dates</h2>\n                <ul id=\"lists\">\n                    {events2.map((event, index) => (\n                        <li key={index}>\n                            {event.title} - {new Date(event.start).toLocaleDateString()}\n                        </li>\n                    ))}\n                </ul>\n            </div>\n            \n        </div>\n    );\n}\n\nexport default WeekPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}