{"ast":null,"code":"var _jsxFileName = \"/Users/annalisekimura/Desktop/Calendar/calendar/src/Pages/MonthPage.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport '../App.css';\nimport Fullcalendar from \"@fullcalendar/react\";\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\nimport interactionPlugin from \"@fullcalendar/interaction\";\nimport { useRef, useEffect } from 'react';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MonthPage() {\n  _s();\n  const calendarRef = useRef(null);\n  const [events, setEvents] = useState([]);\n  useEffect(() => {\n    const storedEvents = JSON.parse(localStorage.getItem('calendarEvents'));\n    if (storedEvents) {\n      setEvents(storedEvents);\n    }\n  }, []);\n  useEffect(() => {\n    const calendarApi = calendarRef.current.getApi();\n  }, []);\n  const handleEventAdd = event => {\n    const newEvents = [...events, event];\n    setEvents(newEvents);\n    localStorage.setItem('calendarEvents', JSON.stringify(newEvents));\n  };\n  document.addEventListener('DOMContentLoaded', function () {\n    var calendarEl = document.getElementById('calendar');\n    var calendar = new FullCalendar.Calendar(calendarEl, {\n      eventClick: function (info) {\n        var eventObj = info.event;\n        alert('Clicked ' + eventObj.title);\n      }\n    });\n    calendar.render();\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Month\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Fullcalendar, {\n      ref: calendarRef,\n      plugins: [dayGridPlugin, timeGridPlugin, interactionPlugin],\n      initialView: \"dayGridMonth\",\n      headerToolbar: {\n        center: 'addEventButton'\n      },\n      customButtons: {\n        addEventButton: {\n          text: 'add event...',\n          click: function () {\n            var dateStr = prompt('Enter a date in YYYY-MM-DD format');\n            var date = new Date(dateStr + 'T00:00:00'); // will be in local time\n\n            if (!isNaN(date.valueOf())) {\n              // valid?\n              var title = prompt('Enter the event title:');\n              const calendarApi = calendarRef.current.getApi();\n              const newEvent = {\n                title: title,\n                start: date,\n                allDay: true\n              };\n              calendarApi.addEvent(newEvent);\n              handleEventAdd(newEvent);\n              alert('Great. Now, update your database...');\n            } else {\n              alert('Invalid date.');\n            }\n          }\n        }\n      },\n      events: events\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"calendar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this);\n}\n_s(MonthPage, \"fcL1sIQjNcpVn0vugHVdkgDcfpA=\");\n_c = MonthPage;\nexport default MonthPage;\nvar _c;\n$RefreshReg$(_c, \"MonthPage\");","map":{"version":3,"names":["React","Fullcalendar","dayGridPlugin","timeGridPlugin","interactionPlugin","useRef","useEffect","useState","jsxDEV","_jsxDEV","MonthPage","_s","calendarRef","events","setEvents","storedEvents","JSON","parse","localStorage","getItem","calendarApi","current","getApi","handleEventAdd","event","newEvents","setItem","stringify","document","addEventListener","calendarEl","getElementById","calendar","FullCalendar","Calendar","eventClick","info","eventObj","alert","title","render","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","plugins","initialView","headerToolbar","center","customButtons","addEventButton","text","click","dateStr","prompt","date","Date","isNaN","valueOf","newEvent","start","allDay","addEvent","id","_c","$RefreshReg$"],"sources":["/Users/annalisekimura/Desktop/Calendar/calendar/src/Pages/MonthPage.js"],"sourcesContent":["import React from 'react';\nimport '../App.css'; \nimport Fullcalendar from \"@fullcalendar/react\";\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\nimport interactionPlugin from \"@fullcalendar/interaction\";\nimport { useRef, useEffect } from 'react';\nimport { useState } from 'react';\n\n\nfunction MonthPage() {\n    const calendarRef = useRef(null);\n    const [events, setEvents] = useState([]);\n\n    useEffect(() => {\n        const storedEvents = JSON.parse(localStorage.getItem('calendarEvents'));\n        if (storedEvents) {\n            setEvents(storedEvents)\n        }\n    }, []);\n\n    useEffect(() => {\n        const calendarApi = calendarRef.current.getApi();\n    }, []);\n\n    const handleEventAdd = (event) => {\n        const newEvents = [...events, event];\n        setEvents(newEvents);\n        localStorage.setItem('calendarEvents', JSON.stringify(newEvents));\n    }\n\n\n\n  document.addEventListener('DOMContentLoaded', function() {\n    var calendarEl = document.getElementById('calendar');\n\n    var calendar = new FullCalendar.Calendar(calendarEl, {\n      eventClick: function(info) {\n        var eventObj = info.event;\n          alert('Clicked ' + eventObj.title);\n      }\n    });\n\n    calendar.render();\n  });\n\n\n    \n    return (\n        \n        <div>\n\n            \n            <h1>Month</h1>\n            <Fullcalendar\n                ref={calendarRef}\n                plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\n                initialView=\"dayGridMonth\"\n                headerToolbar={{\n                    center: 'addEventButton'\n                  }}\n                  customButtons={{\n                    addEventButton: {\n                      text: 'add event...',\n                      click: function() {\n                        var dateStr = prompt('Enter a date in YYYY-MM-DD format');\n                        var date = new Date(dateStr + 'T00:00:00'); // will be in local time\n            \n                        if (!isNaN(date.valueOf())) { // valid?\n                            var title = prompt('Enter the event title:');\n\n                                const calendarApi = calendarRef.current.getApi()\n                                const newEvent = {\n                                    title: title,\n                                    start: date,\n                                    allDay: true\n                                }\n                          calendarApi.addEvent(newEvent);\n                          handleEventAdd(newEvent);\n                          alert('Great. Now, update your database...');\n                        } else {\n                          alert('Invalid date.');\n                        }\n                      }\n                    }\n                  }}\n                  events={events}\n            />\n\n            <div id='calendar'></div>\n            \n        </div>\n    );\n}\n\nexport default MonthPage;\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}