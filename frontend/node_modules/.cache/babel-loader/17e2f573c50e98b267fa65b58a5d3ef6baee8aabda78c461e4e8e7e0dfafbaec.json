{"ast":null,"code":"var _jsxFileName = \"/Users/annalisekimura/Desktop/Calendar/calendar/src/Pages/MonthPage.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport '../App.css';\nimport Fullcalendar from \"@fullcalendar/react\";\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\nimport interactionPlugin from \"@fullcalendar/interaction\";\nimport { useRef, useEffect } from 'react';\nimport { useContext } from 'react';\nimport { EventContext } from './EventContext';\nimport { notifyUser } from '../App';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MonthPage() {\n  _s();\n  const calendarRef = useRef(null);\n  const {\n    events,\n    setEvents\n  } = useContext(EventContext);\n  useEffect(() => {\n    const storedEvents = JSON.parse(localStorage.getItem('calendarEvents'));\n    if (storedEvents) {\n      setEvents(storedEvents);\n    }\n  }, [setEvents]);\n  useEffect(() => {\n    // Simulate checking events each day (could be more sophisticated in a real app)\n    const today = new Date();\n    events.forEach(event => {\n      if (event.date.getDate() === today.getDate()) {\n        notifyUser(`Today is ${event.title}!`);\n      }\n    });\n  }, []);\n  const handleEventAdd = event => {\n    const newEvents = [...events, event];\n    setEvents(newEvents);\n    localStorage.setItem('calendarEvents', JSON.stringify(newEvents));\n  };\n  const handleEventClick = info => {\n    const event = info.event;\n    const choice = prompt(`Do you want to edit or delete the event \"${event.title}\"?\\nType 'Edit' or 'Delete'`);\n    if (choice === 'Edit') {\n      const newTitle = prompt('Enter the new title for the event:', event.title);\n      if (newTitle) {\n        event.setProp('title', newTitle);\n        const updatedEvents = events.map(evt => evt.id === event.id ? {\n          ...evt,\n          title: newTitle\n        } : evt);\n        setEvents(updatedEvents);\n        localStorage.setItem('calendarEvents', JSON.stringify(updatedEvents));\n        alert('Event updated. Now, update your database...');\n      } else {\n        alert('Event title cannot be empty.');\n      }\n    } else if (choice === 'Delete') {\n      const updatedEvents = events.filter(evt => evt.id !== parseInt(event.id, 10));\n      event.remove();\n      setEvents(updatedEvents);\n      localStorage.setItem('calendarEvents', JSON.stringify(updatedEvents));\n      alert('Event deleted. Now, update your database...');\n    }\n  };\n  const getRandomColor = () => {\n    // Generate a random color\n    const hue = Math.floor(Math.random() * 360); // Random hue\n    const saturation = 0.8;\n    const lightness = 0.5;\n    return `hsl(${hue}, ${Math.floor(saturation * 100)}%, ${Math.floor(lightness * 100)}%)`;\n  };\n  const generateTaskColors = () => {\n    let taskColors = JSON.parse(localStorage.getItem('taskColors')) || {};\n    events.forEach(event => {\n      // Generate a color for each unique task title if not already assigned\n      if (!taskColors[event.title]) {\n        taskColors[event.title] = getRandomColor();\n      }\n    });\n    localStorage.setItem('taskColors', JSON.stringify(taskColors));\n    return taskColors;\n  };\n  const eventContent = arg => {\n    const taskColors = generateTaskColors();\n    const color = taskColors[arg.event.title] || getRandomColor();\n    return {\n      html: `<div style=\"background-color: ${color};\">${arg.event.title}</div>`\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Month\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Fullcalendar, {\n      ref: calendarRef,\n      plugins: [dayGridPlugin, timeGridPlugin, interactionPlugin],\n      initialView: \"dayGridMonth\",\n      headerToolbar: {\n        center: 'addEventButton'\n      },\n      customButtons: {\n        addEventButton: {\n          text: 'add event...',\n          click: function () {\n            var dateStr = prompt('Enter a date in YYYY-MM-DD format');\n            var date = new Date(dateStr + 'T00:00:00'); // will be in local time\n\n            if (!isNaN(date.valueOf())) {\n              // valid?\n              var title = prompt('Enter the event title:');\n              var id = Date.now();\n              const calendarApi = calendarRef.current.getApi();\n              const newEvent = {\n                id: id,\n                title: title,\n                start: date,\n                allDay: true\n              };\n              calendarApi.addEvent(newEvent);\n              handleEventAdd(newEvent);\n              alert('Great. Now, update your database...');\n            } else {\n              alert('Invalid date.');\n            }\n          }\n        }\n      },\n      events: events,\n      eventClick: handleEventClick,\n      eventContent: eventContent\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"calendar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 9\n  }, this);\n}\n_s(MonthPage, \"LuckEjHoUg+5RKSlq/D/Nc59xzQ=\");\n_c = MonthPage;\nexport default MonthPage;\nvar _c;\n$RefreshReg$(_c, \"MonthPage\");","map":{"version":3,"names":["React","Fullcalendar","dayGridPlugin","timeGridPlugin","interactionPlugin","useRef","useEffect","useContext","EventContext","notifyUser","jsxDEV","_jsxDEV","MonthPage","_s","calendarRef","events","setEvents","storedEvents","JSON","parse","localStorage","getItem","today","Date","forEach","event","date","getDate","title","handleEventAdd","newEvents","setItem","stringify","handleEventClick","info","choice","prompt","newTitle","setProp","updatedEvents","map","evt","id","alert","filter","parseInt","remove","getRandomColor","hue","Math","floor","random","saturation","lightness","generateTaskColors","taskColors","eventContent","arg","color","html","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","plugins","initialView","headerToolbar","center","customButtons","addEventButton","text","click","dateStr","isNaN","valueOf","now","calendarApi","current","getApi","newEvent","start","allDay","addEvent","eventClick","_c","$RefreshReg$"],"sources":["/Users/annalisekimura/Desktop/Calendar/calendar/src/Pages/MonthPage.js"],"sourcesContent":["import React from 'react';\nimport '../App.css'; \nimport Fullcalendar from \"@fullcalendar/react\";\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\nimport interactionPlugin from \"@fullcalendar/interaction\";\nimport { useRef, useEffect } from 'react';\nimport { useContext } from 'react';\nimport { EventContext } from './EventContext';\nimport { notifyUser } from '../App';\n\n\nfunction MonthPage() {\n    const calendarRef = useRef(null);\n    const {events, setEvents} = useContext(EventContext);\n\n    useEffect(() => {\n        const storedEvents = JSON.parse(localStorage.getItem('calendarEvents'));\n        if (storedEvents) {\n            setEvents(storedEvents)\n        }\n    }, [setEvents]);\n\n    useEffect(() => {\n      // Simulate checking events each day (could be more sophisticated in a real app)\n      const today = new Date();\n      events.forEach(event => {\n        if (event.date.getDate() === today.getDate()) {\n          notifyUser(`Today is ${event.title}!`);\n        }\n      });\n    }, []);\n\n\n    const handleEventAdd = (event) => {\n        const newEvents = [...events, event];\n        setEvents(newEvents);\n        localStorage.setItem('calendarEvents', JSON.stringify(newEvents));\n    }\n\n    \n    const handleEventClick = (info) => {\n        const event = info.event;\n        const choice = prompt(`Do you want to edit or delete the event \"${event.title}\"?\\nType 'Edit' or 'Delete'`);\n    \n        if (choice === 'Edit') {\n          const newTitle = prompt('Enter the new title for the event:', event.title);\n          if (newTitle) {\n            event.setProp('title', newTitle);\n            const updatedEvents = events.map(evt => evt.id === event.id ? {...evt, title: newTitle} : evt);\n            setEvents(updatedEvents);\n            localStorage.setItem('calendarEvents', JSON.stringify(updatedEvents));\n            alert('Event updated. Now, update your database...');\n          } else {\n            alert('Event title cannot be empty.');\n          }\n        } else if (choice === 'Delete') {\n          \n          const updatedEvents = events.filter(evt => evt.id !== parseInt(event.id, 10));\n          event.remove();\n          \n          setEvents(updatedEvents);\n          \n          localStorage.setItem('calendarEvents', JSON.stringify(updatedEvents));\n          alert('Event deleted. Now, update your database...');\n        }\n      };\n\n      const getRandomColor = () => {\n        // Generate a random color\n        const hue = Math.floor(Math.random() * 360); // Random hue\n        const saturation = 0.8;\n        const lightness = 0.5;\n        return `hsl(${hue}, ${Math.floor(saturation * 100)}%, ${Math.floor(lightness * 100)}%)`;\n    };\n\n    const generateTaskColors = () => {\n        let taskColors = JSON.parse(localStorage.getItem('taskColors')) || {};\n        events.forEach(event => {\n            // Generate a color for each unique task title if not already assigned\n            if (!taskColors[event.title]) {\n                taskColors[event.title] = getRandomColor();\n            }\n        });\n        localStorage.setItem('taskColors', JSON.stringify(taskColors));\n        return taskColors;\n    };\n\n    const eventContent = (arg) => {\n        const taskColors = generateTaskColors();\n        const color = taskColors[arg.event.title] || getRandomColor();\n        return {\n            html: `<div style=\"background-color: ${color};\">${arg.event.title}</div>`\n        };\n    };\n\n    \n    return (\n        \n        <div>\n\n            \n            <h1>Month</h1>\n            <Fullcalendar\n                ref={calendarRef}\n                plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\n                initialView=\"dayGridMonth\"\n                headerToolbar={{\n                    center: 'addEventButton'\n                  }}\n                  customButtons={{\n                    addEventButton: {\n                      text: 'add event...',\n                      click: function() {\n                        var dateStr = prompt('Enter a date in YYYY-MM-DD format');\n                        var date = new Date(dateStr + 'T00:00:00'); // will be in local time\n            \n                        if (!isNaN(date.valueOf())) { // valid?\n                            var title = prompt('Enter the event title:');\n                            var id = Date.now();\n\n                                const calendarApi = calendarRef.current.getApi()\n                                const newEvent = {\n                                    id: id,\n                                    title: title,\n                                    start: date,\n                                    allDay: true\n                                }\n                          calendarApi.addEvent(newEvent);\n                          handleEventAdd(newEvent);\n                          alert('Great. Now, update your database...');\n                        } else {\n                          alert('Invalid date.');\n                        }\n                      }\n                    }\n                  }}\n                  events={events}\n                  eventClick={handleEventClick}\n                  eventContent={eventContent}\n                  \n            />\n\n            <div id='calendar'></div>\n            \n        </div>\n    );\n}\n\nexport default MonthPage;\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}